# AWSTemplateFormatVersion: "2010-09-09"
# Description: "CloudFormation template for creating a task definition"
# Resources:
#   MyTaskDefinition:
#     Type: AWS::ECS::TaskDefinition
#     Properties:
#       RequiresCompatibilities:
#         - "FARGATE"
#       ExecutionRoleArn: "arn:aws:iam::<replace with account ID>:role/ecsTaskExecutionRole"
#       Cpu: 256
#       Memory: 512
#       NetworkMode: "awsvpc"
#       ContainerDefinitions:
#         - Name: "myawsplanet"
#           Image: "<replace with account ID>.dkr.ecr.eu-west-3.amazonaws.com/mydeveloperplanet/myawsplanet:latest"
#           MemoryReservation: 256
#           Memory: 512
#           PortMappings:
#             - ContainerPort: 8080
#               Protocol: tcp
#   ECSCluster:
#     Type: 'AWS::ECS::Cluster'
#     Properties:
#       ClusterName: MyFargateCluster

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation for creating a task definition

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'dexlk-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecs-services
      Subnets:
        - !ImportValue 'Subnet1'
        - !ImportValue 'Subnet2'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Load Balancer Security group
      VpcId: !ImportValue 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId: !ImportValue 'VPC'
      Protocol: 'HTTP'
      Port: '80'

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'lgdexlkcluster'
      RetentionInDays: 1

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
     VpcId: !ImportValue 'VPC'
     GroupDescription: EC2 containers SG
     SecurityGroupIngress:
       - SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
         IpProtocol: -1
       - CidrIp: 0.0.0.0/0
         IpProtocol: -1

Outputs:

  Cluster:
    Value: !Ref ECSCluster
    Export:
      Name: 'ECSCluster'

  Listener:
    Description: listener port 80
    Value: !Ref LoadBalancerListener
    Export:
      Name: 'Listener'

  ContainerSecurityGroup:
    Description: Container security group
    Value: !Ref ContainerSecurityGroup
    Export:
      Name: 'ContainerSecurityGroup'

  LoadBalancerDNS:
    Description: Load Balancer Domain name
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: 'DomainName'